{"version":3,"sources":["836 [Converted].svg","reducers/fetch_tech.js","reducers/custom_search.js","reducers/reducers.js","store/store.js","components/main.js","actions/fetch_custom_news.js","components/tech.js","actions/fetch_tech.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["fetchTech","state","techNews","action","type","payload","customSearch","customNews","reducers","combineReducers","FetchTech","CustomSearch","middleware","applyMiddleware","thunk","store","createStore","Reducers","Main","useState","sources","setSources","source","setSource","relevance","setRelevance","customNewsSelector","useSelector","dispatch","useDispatch","getCustomNews","fetch","then","res","json","articles","catch","err","console","log","fetchCustomNews","useEffect","response","news","length","className","map","x","src","urlToImage","alt","title","publishedAt","class","href","url","role","description","Fragment","onSubmit","e","preventDefault","onChange","target","value","id","name","Tech","techSelector","getTechNews","Routes","exact","path","component","App","Store","to","image","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9e411aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/836 [Converted].431102b9.svg\";","const fetchTech=(state={\n    techNews:[]\n    }, action)=>{\n        if(action.type === \"FETCH_TECH\"){\n            \n            state= {...state, techNews: action.payload}\n        }\n    \n        return state;\n    };\n    export default fetchTech;","const customSearch=(state={\n    customNews:[]\n    }, action)=>{\n        if(action.type === \"FETCH_CUSTOM_NEWS\"){\n            \n            state= {...state, customNews: action.payload}\n        }\n    \n        return state;\n    };\n    export default customSearch;","import {combineReducers} from \"redux\";\nimport fetchTech from \"../reducers/fetch_tech\";\nimport customSearch from \"../reducers/custom_search\";\n\n\n//combine reducers\n//remember you need to export the reducers to use them\nconst reducers= combineReducers({\n    FetchTech: fetchTech,\n    CustomSearch: customSearch\n});\n\nexport default reducers;","import thunk from \"redux-thunk\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport Reducers from \"../reducers/reducers\";\n\n\n//--- MIDDLEWARE\n// add middleware inside this function\nconst middleware= applyMiddleware(thunk);\n\n\n//--- STORE\nconst store= createStore(Reducers, middleware);\n\nexport default store;\n","import React, { useState, useEffect } from \"react\";\n//redux hooks\n//import the action\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchCustomNews } from \"../actions/fetch_custom_news\";\n\nconst Main = () => {\n  //news sources\n  const [sources, setSources] = useState([]);\n  //select source\n  const [source, setSource] = useState(\"\");\n  //select relevance\n  const [relevance, setRelevance] = useState(\"\");\n\n  //----- connect redux\n  //here we get add the reducer that has the state we want\n  const customNewsSelector = useSelector((state) => state.CustomSearch);\n  //dispatch hook\n  const dispatch = useDispatch();\n  //action to dispatch\n  const getCustomNews = (source, relevance) =>\n    dispatch(fetchCustomNews(source, relevance));\n\n  //get the sources\n  const getSources = () => {\n    fetch(\"https://newsapi.org/v1/sources?\")\n      .then((res) => {\n        console.log(customNewsSelector.customNews);\n        return res.json();\n      })\n      .then((response) => {\n        console.log(response);\n        setSources(response.sources);\n      });\n  };\n\n  //effect\n  useEffect(() => {\n    getSources();\n  }, []);\n\n  const getNews = (e) => {\n    console.log(source);\n    e.preventDefault();\n    if (source === \"\" || source === \"nothing\") {\n      console.log(\"There is no source selected\");\n    } else {\n      getCustomNews(source, relevance);\n      console.log(customNewsSelector.customNews);\n    }\n  };\n\n  let news;\n  if (customNewsSelector.customNews.length > 0) {\n    news = (\n      <div className=\"news\">\n        {customNewsSelector.customNews.map((x) => {\n          return (\n            <div className=\"post\" key={x.title}>\n              <img src={x.urlToImage} alt={x.title} />\n              <h2>{x.publishedAt}</h2>\n              {/* <h2>{x.title}</h2> */}\n              <a class=\"btn btn-primary\" href={x.url} role=\"button\">\n                {x.title}\n              </a>\n              <p>{x.description}</p>\n            </div>\n          );\n        })}\n      </div>\n    );\n  } else {\n    news = <p>Select a source and relevance from the form</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <h2>Custom Search</h2>\n\n        <form onSubmit={getNews}>\n          <div className=\"form-control\">\n            <label>Source</label>\n            <select onChange={(e) => setSource(e.target.value)}>\n              <option value=\"nothing\">Select an option...</option>\n              {sources.map((source) => {\n                return (\n                  <option key={source.id} value={source.id}>\n                    {source.name}\n                  </option>\n                );\n              })}\n            </select>\n            <label>Relevance</label>\n            <select onChange={(e) => setRelevance(e.target.value)}>\n              <option value=\"latest\">Latest</option>\n              <option value=\"top\">Top</option>\n            </select>\n            <input type=\"submit\" value=\"Search\" />\n          </div>\n        </form>\n\n        {news}\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default Main;\n","export function fetchCustomNews(source, relevance) {\n  //return the actual action to do\n  return function (dispatch) {\n    fetch(\n      \"https://newsapi.org/v1/articles?source=\" +\n        source +\n        \"&sortBy=\" +\n        relevance +\n        \"&apiKey=b58bf17ea7d34e73b32a2e3e4f79b8b1\"\n    )\n      .then((res) => {\n        return res.json();\n      })\n      .then((res) => {\n        // console.log(res)\n        dispatch({ type: \"FETCH_CUSTOM_NEWS\", payload: res.articles });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchTech } from \"../actions/fetch_tech\";\n\nconst Tech = () => {\n    \n    //----- redux and dispatch the action\n    const techSelector = useSelector((state) => state.FetchTech);\n    const dispatch = useDispatch();\n    const getTechNews = () => dispatch(fetchTech());\n    \n\n    useEffect(()=>{\n       getTechNews();\n    }, [])\n\n\n    return(\n        <React.Fragment>\n            <section>\n                <h2>Technology News</h2>\n                <div className=\"news\">\n                    {techSelector.techNews.map(x => {\n                        return (\n                            <div className=\"post\" key={x.title}> \n                                <img src={x.urlToImage} />\n                                {/* <h2>{x.title}</h2> */}\n                                <a class=\"btn btn-primary\" href={x.url} role=\"button\">{x.title}</a>\n                                <p>{x.description}</p>\n                            </div>\n                        )\n                    })}\n                </div>\n            </section>\n        </React.Fragment>\n    )   \n}\n\nexport default Tech;","export function fetchTech() {\n  //return the actual action to do\n  return function (dispatch) {\n    fetch(\n      \"https://newsapi.org/v1/articles?source=the-verge&sortBy=top&apiKey=b58bf17ea7d34e73b32a2e3e4f79b8b1\"\n    )\n      .then((res) => {\n        return res.json();\n      })\n      .then((res) => {\n        // console.log(res)\n        dispatch({ type: \"FETCH_TECH\", payload: res.articles });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n}\n","import React from \"react\";\nimport { Switch, Route} from \"react-router-dom\";\n\n//import the components\nimport Main from \"./components/main\";\nimport Tech from \"./components/tech\";\n\nconst Routes = () => (\n   \n        <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route exact path=\"/tech\" component={Tech} />\n        </Switch>\n       \n) \n\nexport default Routes;","import React from \"react\";\n\n//image\nimport image from \"../src/836 [Converted].svg\";\n\nimport Store from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nimport { Link } from \"react-router-dom\";\n//routes\nimport Routes from \"./routes\";\n\nfunction App() {\n  return (\n    <Provider store={Store}>\n      <div className=\"App\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n          </ul>\n          <ul>\n            <li>\n              <Link to=\"/\">Search</Link>\n            </li>\n            <li>\n              <Link to=\"/tech\">Technology</Link>\n            </li>\n          </ul>\n        </nav>\n        <header>\n          <h1>NEWS FOR YOU📰</h1>\n          {/* <h2>Deepak Mohit Priyank Pushkar</h2> */}\n          {/* <h3>Ham chaar chutiye phir se S laayenge😁🤣😆</h3> */}\n\n          <img src={image} />\n        </header>\n\n        <main>\n          <Routes />\n        </main>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//router v4\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n<BrowserRouter>\n <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}